#!/bin/bash

PACKAGE_VERSION="3.1.5"

usage() {
    err_msg "사용법: git-release [-v | --version] [-h | --help] [-M | --major] [-m | --minor] [-p | patch]"
    exit 1
}

exit_on_failed() { 
    echo "$@";
    exit 1; 
}

get_version() {
    echo "v$PACKAGE_VERSION"
    exit 1
}

bump_major() {
    
    exit 1
}

err_msg() { echo "$@" ;} >&2

if [ $# -eq 0 ]
    then
        usage
fi

# long 옵션 처리
A=""
bumper=""
while true; do
    [ $# -eq 0 ] && break
    case $1 in
        --major)
            bumper="--major"
            shift; continue
            ;;
        --minor)
            bumper="--minor"
            shift; continue
            ;;
        --patch)
            bumper="--patch"
            shift; continue
            ;;
        --help)
            usage
            shift; continue
            ;;
        --version)
            get_version
            shift; continue
            ;;
        --*) 
            err_msg "알 수 없는 옵션: $1"
            usage;
            ;;
    esac

    A=$A$([ -n "$A" ] && echo -e "\a")$1
    shift
done

# $@' 값에 short 옵션만 남기기
IFS=$(echo -e "\a"); set -f; set -- $A; set +f; IFS=$(echo -e " \n\t")

# short 옵션 처리
while getopts "Mmphv" opt; do
    case $opt in
        M)
            bumper="--major"
            ;;
        m)
            bumper="--minor"
            ;;
        p)
            bumper="--patch"
            ;;
        h)
            usage
            ;;
        v)
            get_version
            ;;
        *)
            # err_msg "알 수 없는 옵션: -$OPTARG"
            usage
            ;;
    esac
done

shift $(( OPTIND - 1 ))

echo "🚡 Git release를 시작합니다."

echo ""

# dev 브랜치로 전환
dev_branch="dev"
echo "🙌 '$dev_branch' 브랜치로 전환합니다"
echo "git checkout $dev_branch"
git checkout $dev_branch || exit_on_failed "오류가 발생했습니다. $dev_branch 브랜치가 있는지 확인하고 다시 시도하세요."

echo ""

# Origin dev 브랜치 최신 커밋 pull & rebase
echo "👆 Origin dev 브랜치의 최신 커밋을 pull & rebase합니다"
echo "git pull --rebase"
git pull --rebase || exit_on_failed "문제를 해결하고 다시 시도하세요."

echo ""

# package.json 버전 정보 업데이트
echo "🤞 package.json 버전 정보를 업데이트하고 버전을 태깅합니다"
echo "yarn version $bumper"
yarn version $bumper || exit_on_failed "오류가 발생했습니다."

echo ""

# dev 브랜치 푸시
echo "🤟 '$dev_branch' 브랜치에 새로운 커밋이 추가되었기 때문에 Origin에 푸시합니다"
echo "git push origin $dev_branch"
git push origin $dev_branch || exit_on_failed "오류가 발생했습니다."

echo ""

semver=$(cat package.json \
  | grep version \
  | head -1 \
  | awk -F: '{ print $2 }' \
  | sed 's/[",]//g' \
  | tr -d '[[:space:]]')

v_semver="v$semver"

# 릴리즈 브랜치로 전환
release_branch="release/$v_semver"
echo "🤘 릴리즈 브랜치 $release_branch 로 전환합니다"
echo "git checkout -b $release_branch"
git checkout -b $release_branch || exit_on_failed "오류가 발생했습니다. 나머지 과정은 수동으로 진행해주세요."

echo ""

# 태그와 함께 푸시
echo "🚀 GitHub에 푸시합니다. 3..2..1.."
echo "git push origin '$release_branch' && git push origin $v_semver"
git push origin "$release_branch" && git push origin $v_semver || exit_on_failedexit_on_failed "오류가 발생했습니다. 나머지 과정은 수동으로 진행해주세요."

echo ""

PACKAGE_NAME=$(cat package.json \
  | grep name \
  | head -1 \
  | awk -F: '{ print $2 }' \
  | sed 's/[",]//g' \
  | tr -d '[[:space:]]')

echo $PACKAGE_NAME

echo "💫 푸시 완료! 이제 PR을 생성할 시간입니다"
echo ""
echo "PR 생성 URL:"
echo "==========================================================="
echo "https://github.com/inflearn/$PACKAGE_NAME/pull/new/$release_branch"
echo "==========================================================="

echo ""

echo "️🌈 Git release 마무리 작업 중입니다"

echo ""

echo "$dev_branch 브랜치로 전환합니다"
echo "git checkout $dev_branch"
git checkout $dev_branch

echo ""

echo "$release_branch 브랜치를 삭제합니다"
echo "git branch -d $release_branch"
git branch -d $release_branch

echo ""

echo "진짜 안녕! 🖖"